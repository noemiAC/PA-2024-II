import streamlit as st
import pandas as pd
import plotly.express as px
from streamlit_option_menu import option_menu
import geopandas as gpd
import folium
import matplotlib.pyplot as plt
from shapely.geometry import Point
from streamlit_folium import st_folium
from PIL import Image

st.set_page_config(page_title="Sismos", page_icon="üåê", initial_sidebar_state="expanded", layout='wide')
# Cargar dataset
file_path = "Dataset_1960_2023_sismo.csv"
data = pd.read_csv(file_path)
data['FECHA_UTC'] = pd.to_datetime(data['FECHA_UTC'], format='%Y%m%d', errors='coerce').dt.strftime('%Y-%m-%d')
data['HORA_UTC'] = pd.to_datetime(data['HORA_UTC'], errors='coerce', format='%H%M%S').dt.time

# Funciones de las p√°ginas
def home_page():
    st.title("Cat√°logo S√≠smico 1960 - 2023")
    st.markdown("<h1 style='color:blue; text-align:center;'>BIENVENIDO A LA APLICACI√ìN DE AN√ÅLISIS DE SISMOS</h1>", unsafe_allow_html=True)

    # Introducci√≥n al tema
    st.markdown("""
    ### ¬øQu√© es un sismo?
    Un sismo es una sacudida brusca y pasajera de la corteza terrestre que se produce por diversas causas, siendo las m√°s comunes la actividad de fallas geol√≥gicas. Tambi√©n puede originarse por la fricci√≥n en el borde de placas tect√≥nicas, procesos volc√°nicos, impactos de asteroides o explosiones nucleares subterr√°neas realizadas por el ser humano.

    El punto donde inicia el movimiento dentro de la Tierra se llama hipocentro o foco, y el lugar de la superficie terrestre directamente encima de este punto se denomina epicentro. Los sismos generan ondas s√≠smicas que se propagan desde el hipocentro y pueden causar fen√≥menos como desplazamientos de la corteza terrestre, tsunamis, corrimientos de tierras o actividad volc√°nica, dependiendo de su magnitud y origen.

    Se clasifican en varios tipos, como tect√≥nicos, volc√°nicos, superficiales, y pueden medirse mediante escalas como la de Richter o la de magnitud de momento.

    ### Importancia del monitoreo de sismos
    - **Prevenci√≥n**: El an√°lisis de los datos s√≠smicos ayuda a entender las zonas de riesgo y dise√±ar construcciones m√°s seguras.
    - **Ciencia**: Proporciona informaci√≥n clave sobre la din√°mica del planeta Tierra.
    - **Educaci√≥n**: Incrementa la conciencia p√∫blica sobre c√≥mo actuar en caso de sismos.

    En esta aplicaci√≥n, puedes explorar datos s√≠smicos registrados desde 1960 hasta 2023. Usa las opciones del men√∫ para visualizar mapas, gr√°ficos y aplicar filtros personalizados seg√∫n tus intereses.
    """)
    img = Image.open("img/sismoportada.jpeg")
    img = img.resize((500, 600))  # Ajusta el valor de la altura seg√∫n lo necesario
    # Mostrar la imagen redimensionada
    st.image(img)
    st.markdown("https://sinia.minam.gob.pe/sites/default/files/sial-sialtrujillo/archivos/public/docs/328.pdf")
    # st.image(
    #     "img/sismo.png",  # Ruta relativa a la imagen
    #     caption="El movimiento de la tierra nos impulsa a ser m√°s conscientes y a valorar cada instante",
    #     use_container_width=True
    # )
    
    col1, col2 = st.columns([4,1])
    st.markdown("<h3>Componentes<h3>", unsafe_allow_html=True)
    # Conclusi√≥n  al tema
    with col1:
        st.markdown("""
        <p>
        El Per√∫, ubicado en el Cintur√≥n de Fuego del Pac√≠fico, es una regi√≥n altamente s√≠smica. Esta actividad, combinada con un alto porcentaje de viviendas construidas mediante autoconstrucci√≥n o de antig√ºedad considerable, incrementa significativamente la vulnerabilidad de su poblaci√≥n frente a eventos s√≠smicos. En este contexto, la plataforma de cat√°logo s√≠smico (1960-2023) que hemos desarrollado se convierte en una herramienta fundamental para informar a los usuarios sobre los sismos hist√≥ricos en el pa√≠s, facilitar la investigaci√≥n sismol√≥gica con una base de datos homog√©nea y concientizar a la poblaci√≥n sobre la recurrencia de estos eventos y la importancia de estar preparados [1].
        Nuestra plataforma cuenta con funcionalidades clave dise√±adas para mejorar la comprensi√≥n de los usuarios. A trav√©s de mapas interactivos, es posible visualizar la distribuci√≥n espacial de los sismos, diferenciados por colores seg√∫n su magnitud o profundidad [2]. Los filtros din√°micos permiten realizar b√∫squedas espec√≠ficas por magnitud, profundidad, fecha y departamento, mientras que gr√°ficos como histogramas y dispersi√≥n ofrecen an√°lisis detallados sobre la frecuencia de los sismos y la relaci√≥n entre sus par√°metros. Adem√°s, cada evento cuenta con informaci√≥n detallada sobre su fecha, hora, magnitud, profundidad, ubicaci√≥n y, cuando sea posible, datos sobre da√±os ocasionados.
        El dise√±o intuitivo de la interfaz y la inclusi√≥n de recursos educativos sobre la sismolog√≠a en Per√∫ contribuyen a que esta herramienta sea accesible tanto para investigadores como para el p√∫blico en general. Asimismo, se considera crucial mantener la base de datos actualizada con los √∫ltimos eventos s√≠smicos para garantizar la relevancia y efectividad de la plataforma [3].
        Con esta plataforma, buscamos no solo aumentar el conocimiento sobre la actividad s√≠smica en el Per√∫, sino tambi√©n contribuir a la toma de decisiones informadas para la prevenci√≥n y mitigaci√≥n de desastres, fortaleciendo as√≠ la resiliencia de nuestras
        comunidades ante futuros eventos. s√≠smicos.</p>""", unsafe_allow_html=True)
    with col2: 
        st.image(
            "img/sismo_intro.png",  # Ruta relativa a la imagen
            caption="El movimiento de la tierra nos impulsa a ser m√°s conscientes y a valorar cada instante",  use_container_width=True
        )
    col1, col2 = st.columns([1,4])
    with col1:
        img = Image.open("img/informesismo.png")
        img = img.resize((250, 300))  # Ajusta el valor de la altura seg√∫n lo necesario
        # Mostrar la imagen redimensionada
        st.image(img)
    with col2:
        st.markdown("""
        <h5 style="color:blue; font-weight:bold; margin-bottom:5px;">Sismotect√≥nica del sismo de Yauca del 28 de junio 2024 (M7.0) y niveles de sacudimiento del suelo - Informe T√©cnico N¬∞ 023-2024/IGP Ciencias de la Tierra S√≥lida</h5>
        
        <p style="font-size:1.2rem;">El 28 de junio de 2024, un sismo de magnitud 7.0 ocurri√≥ a 54 km al SO de Yauca, Arequipa, con sacudidas percibidas hasta 500 km. Fue causado por la fricci√≥n entre las placas de Nazca y Sudamericana, generando 16 r√©plicas en 48 horas. El √°rea de ruptura fue de 55 x 70 km. Aceleraciones de 150 cm/seg¬≤ en Yauca, Chala, Atiquipa y Bella Uni√≥n provocaron da√±os en viviendas de adobe y concreto, adem√°s de deslizamientos en la Panamericana Sur y v√≠as secundarias.</p>
        
        """, unsafe_allow_html=True)

        st.markdown("""https://sigrid.cenepred.gob.pe/sigridv3/documento/17731.""")
    col1, col2 = st.columns([1,4])
    with col1:
        img = Image.open("img/mapasismico.png")
        img = img.resize((250, 300))  # Ajusta el valor de la altura seg√∫n lo necesario
        # Mostrar la imagen redimensionada
        st.image(img)

    with col2:
        st.markdown("""
        <h5 style="color:blue; font-weight:bold; margin-bottom:5px;">MAPAS S√çSMICOS</h5>
        
        <p style="font-size:1rem;">El 19 de septiembre de 2013, el Instituto Geof√≠sico del Per√∫ (IGP) present√≥ el Mapa S√≠smico del Per√∫ en el Ministerio del Ambiente (MINAM), resultado de un trabajo de cuatro a√±os concluido en 2012. Este documento detalla la distribuci√≥n de eventos s√≠smicos entre 1960 y 2011, clasificados por profundidad, y permite identificar las zonas m√°s afectadas por sismos en el pa√≠s. Hernando Tavera, responsable del √°rea de Sismolog√≠a del IGP, destac√≥ que las ciudades de la Costa son las m√°s impactadas por sismos de intensidad regular y alta. En la sierra y la selva, las regiones con mayor actividad s√≠smica incluyen Moyobamba, Rioja, Ayacucho, Huancayo, Cusco y el Ca√±√≥n del Colca, en Arequipa. Los mapas fueron entregados a direcciones del MINAM, como la Direcci√≥n de Investigaci√≥n e Informaci√≥n Ambiental y la de Ordenamiento Territorial, para apoyar la gesti√≥n del riesgo y la preparaci√≥n de la poblaci√≥n ante sismos. La ceremonia cont√≥ con la participaci√≥n de autoridades del IGP, MINAM, INDECI, RedPeIA, SOS Emergencias, la Municipalidad de Lima y otros organismos. </p>
        
        """, unsafe_allow_html=True)

        st.markdown("""https://sinia.minam.gob.pe/novedades/sismos-son-mas-frecuentes-fuertes-costa-pais""")
    col1, col2 = st.columns([1,4])
    with col1:
        img = Image.open("img/simulaciones.png")
        img = img.resize((250, 300))  # Ajusta el valor de la altura seg√∫n lo necesario
        # Mostrar la imagen redimensionada
        st.image(img)
    with col2:
        st.markdown("""
        <h5 style="color:blue; font-weight:bold; margin-bottom:5px; ">Aprueban la Ejecuci√≥n de Simulacros y Simulaciones y la Directiva ‚ÄúEjecuci√≥n de Simulacros y Simulaciones Ante Peligros Asociados a Fen√≥menos de Origen Natural‚Äù</h5>
        
        <p style="font-size:1.2rem;">reaccionar ante diversos escenarios (por bajas temperaturas; sismos seguido de tsunami; sismos seguido de fen√≥menos de geodin√°mica externa y por intensas precipitaciones pluviales) y la ejecuci√≥n de las simulaciones tiene por objeto poner a prueba los Planes de Gesti√≥n Reactiva de los sectores, gobiernos regionales y locales, entidades p√∫blicas y privadas. .</p>
        
        """, unsafe_allow_html=True)

        st.markdown("""https://sinia.minam.gob.pe/sites/default/files/sinia/archivos/public/docs/rm_080-2016-pcm.pdf""")
    col1, col2 = st.columns([1,4])
    with col1:
        img = Image.open("img/frecuentes.png")
        img = img.resize((250, 300))  # Ajusta el valor de la altura seg√∫n lo necesario
        # Mostrar la imagen redimensionada
        st.image(img)
    with col2:
        st.markdown("""
        <h5 style="color:blue; font-weight:bold; margin-bottom:5px;">Sismos son m√°s frecuentes y fuertes en la costa del pa√≠s</h5>
        
        <p style="font-size:1.2rem;">El Mapa S√≠smico del Per√∫ muestra sismos de magnitud ‚â•M4.0 desde 1960, seg√∫n datos del IGP y Engdahl & Villase√±or. Clasifica eventos como superficiales, intermedios y profundos, seg√∫n la profundidad de sus focos. Los sismos se originan en tres fuentes: contacto entre placas (como el terremoto de Pisco 2007, 8.0Mw), deformaci√≥n continental (Moyobamba 1991, M6.0), y deformaci√≥n oce√°nica (2011, M7.0). Predomina la actividad s√≠smica en el Centro y Sur. Este mapa es clave para delimitar zonas sismog√©nicas y prevenir riesgos.</p>
        
        """, unsafe_allow_html=True)

        st.markdown("""https://ultimosismo.igp.gob.pe/mapas-sismicos""")

    st.markdown("""
    ### Recursos adicionales
    - [El sitio web oficial de los registros administrativos del riesgo de desastres](https://sigrid.cenepred.gob.pe/sigridv3/documento/17731)
    - [El Sistema Nacional de Informaci√≥n Ambiental](https://sinia.minam.gob.pe/normas/aprueban-ejecucion-simulacros-simulaciones-directiva-ejecucion)
    """)

    st.info("üôåLa naturaleza puede ser poderosa, pero la valent√≠a y la solidaridad de las personas son indestructibles.ü•∞")

def visualizacion_anos(tipo):
    st.title("Visualizaci√≥n por A√±os")

    # Convertir fechas a datetime si no est√°n ya en ese formato
    data["FECHA_UTC"] = pd.to_datetime(data["FECHA_UTC"], errors="coerce")
    data["A√ëO"] = data["FECHA_UTC"].dt.year
    data["MES"] = data["FECHA_UTC"].dt.month

    filtro_tipo = st.radio("Selecciona el tipo de filtro:", ["Por rango de a√±os", "Por un solo a√±o"])
    
    if filtro_tipo == "Por rango de a√±os":
        rango_min = st.number_input("A√±o m√≠nimo:", value=int(data["A√ëO"].min()), step=1)
        rango_max = st.number_input("A√±o m√°ximo:", value=int(data["A√ëO"].max()), step=1)
        if rango_min <= rango_max:
            datos_filtrados = data[(data["A√ëO"] >= rango_min) & (data["A√ëO"] <= rango_max)]
            conteo_por_a√±o = datos_filtrados["A√ëO"].value_counts().sort_index()
            
            if not conteo_por_a√±o.empty:
                colores = px.colors.qualitative.Set3  # Colores para los gr√°ficos
                if tipo == "barras":
                    fig = px.bar(conteo_por_a√±o, x=conteo_por_a√±o.index, y=conteo_por_a√±o.values, 
                                 color=conteo_por_a√±o.index, 
                                 color_discrete_sequence=colores,
                                 labels={"x": "A√±o", "y": "Cantidad de Sismos"})
                elif tipo == "sector":
                    fig = px.pie(values=conteo_por_a√±o.values, names=conteo_por_a√±o.index,
                                 labels={"names": "A√±o", "values": "Cantidad de Sismos"})
                elif tipo == "lineas":
                    fig = px.line(conteo_por_a√±o, x=conteo_por_a√±o.index, y=conteo_por_a√±o.values, 
                                  markers=True, 
                                  labels={"x": "A√±o", "y": "Cantidad de Sismos"})
                    fig.update_traces(marker=dict(size=10, color=colores[0]), line=dict(color=colores[1]))
                else:
                    st.error("Tipo de gr√°fico no soportado.")
                    return
                st.plotly_chart(fig)
                cantidad = datos_filtrados.shape[0]
                st.write(f"Cantidad de sismos : {cantidad}")
                
            else:
                st.warning("No hay datos para el rango de a√±os seleccionado.")
        else:
            st.error("El a√±o m√≠nimo no puede ser mayor que el m√°ximo.")

    elif filtro_tipo == "Por un solo a√±o":
        a√±o = st.number_input("A√±o:", value=int(data["A√ëO"].min()), step=1)
        datos_filtrados = data[data["A√ëO"] == a√±o]
        conteo_por_mes = datos_filtrados["MES"].value_counts().sort_index()

        if not datos_filtrados.empty and not conteo_por_mes.empty:
            colores = px.colors.qualitative.Set3
            if tipo == "barras":
                fig = px.bar(conteo_por_mes, x=conteo_por_mes.index, y=conteo_por_mes.values,
                             color=conteo_por_mes.index, color_discrete_sequence=colores,
                             labels={"x": "Mes", "y": "Cantidad de Sismos"})
            elif tipo == "sector":
                fig = px.pie(values=conteo_por_mes.values, names=conteo_por_mes.index,
                             labels={"names": "Mes", "values": "Cantidad de Sismos"})
            elif tipo == "lineas":
                fig = px.line(conteo_por_mes, x=conteo_por_mes.index, y=conteo_por_mes.values,markers=True,
                              labels={"x": "Mes", "y": "Cantidad de Sismos"})
                fig.update_traces(marker=dict(size=10, color=colores[0]), line=dict(color=colores[1]))
            else:
                st.error("Tipo de gr√°fico no soportado.")
                return
            st.plotly_chart(fig)
            cantidad = datos_filtrados.shape[0]
            st.write(f"Cantidad de sismos : {cantidad}")
        else:
            st.warning("No hay datos para el a√±o seleccionado.")

def visualizacion_magnitud(tipo):
    st.title("Visualizaci√≥n por Magnitud")
    filtro_tipo = st.radio("Selecciona el tipo de filtro:", ["Por rango de magnitudes", "Por magnitud √∫nica"])
    colores = px.colors.qualitative.Pastel
    if filtro_tipo == "Por rango de magnitudes":
        magnitud_min = st.number_input("Magnitud m√≠nima:", value=float(data["MAGNITUD"].min()), step=0.1)
        magnitud_max = st.number_input("Magnitud m√°xima:", value=float(data["MAGNITUD"].max()), step=0.1)
        if magnitud_min <= magnitud_max:
            datos_filtrados = data[(data["MAGNITUD"] >= magnitud_min) & (data["MAGNITUD"] <= magnitud_max)]
            conteo_por_magnitud = datos_filtrados["MAGNITUD"].value_counts().sort_index()
            if tipo == "barras":
                fig = px.bar(conteo_por_magnitud, x=conteo_por_magnitud.index, y=conteo_por_magnitud.values, 
                             color=conteo_por_magnitud.index, 
                             color_discrete_sequence=colores,
                             labels={"x": "Magnitud", "y": "Cantidad de Sismos"})
            elif tipo == "sector":
                fig = px.pie(values=conteo_por_magnitud.values, names=conteo_por_magnitud.index,
                             labels={"names": "Magnitud", "values": "Cantidad de Sismos"})

            elif tipo == "lineas":
                fig = px.line(conteo_por_magnitud, x=conteo_por_magnitud.index, y=conteo_por_magnitud.values, 
                              markers=True, 
                              labels={"x": "Magnitud", "y": "Cantidad de Sismos"})
                fig.update_traces(marker=dict(size=10, color=colores[0]), line=dict(color=colores[1]))
            else:
                st.error("Tipo de gr√°fico no soportado.")
                return
            st.plotly_chart(fig)
            cantidad = datos_filtrados.shape[0]
            st.write(f"Cantidad de sismos : {cantidad}")
        else:
            st.error("La magnitud m√≠nima no puede ser mayor que la m√°xima.")
    
    elif filtro_tipo == "Por magnitud √∫nica":
        magnitud = st.number_input("Ingresa una magnitud:", value=float(data["MAGNITUD"].min()), step=0.1)
        datos_filtrados = data[data["MAGNITUD"] == magnitud]
        if datos_filtrados.empty:
            st.write("No se encontraron datos para la magnitud seleccionada.")
        else:
            st.dataframe(datos_filtrados)
            cantidad = datos_filtrados.shape[0]
            st.write(f"Cantidad de sismos : {cantidad}")

def visualizacion_profundidad(tipo):
    st.title("Visualizaci√≥n por Profundidad")
    filtro_tipo = st.radio("Selecciona el tipo de filtro:", ["Por rango de profundidad", "Por valor √∫nico de profundidad"])

    if filtro_tipo == "Por rango de profundidad":
        profundidad_min = st.number_input("Profundidad m√≠nima (km):", value=float(data["PROFUNDIDAD"].min()), step=0.1)
        profundidad_max = st.number_input("Profundidad m√°xima (km):", value=float(data["PROFUNDIDAD"].max()), step=0.1)
        if profundidad_min <= profundidad_max:
            datos_filtrados = data[(data["PROFUNDIDAD"] >= profundidad_min) & (data["PROFUNDIDAD"] <= profundidad_max)]
            conteo_por_profundidad = datos_filtrados["PROFUNDIDAD"].value_counts().sort_index()
            fig = px.bar(conteo_por_profundidad, x=conteo_por_profundidad.index, y=conteo_por_profundidad.values, labels={"x": "Profundidad", "y": "Cantidad de Sismos"})
            colores = px.colors.qualitative.Set3
            if tipo == "barras":
                fig = px.bar(conteo_por_profundidad, x=conteo_por_profundidad.index, y=conteo_por_profundidad.values,
                             color=conteo_por_profundidad.index, color_discrete_sequence=colores,
                             labels={"x": "Profundidad", "y": "Cantidad de Sismos"})
            elif tipo == "sector":
                fig = px.pie(values=conteo_por_profundidad.values, names=conteo_por_profundidad.index,
                             labels={"names": "Profundidad", "values": "Cantidad de Sismos"})
            elif tipo == "lineas":
                fig = px.line(conteo_por_profundidad, x=conteo_por_profundidad.index, y=conteo_por_profundidad.values,markers=True,
                              labels={"x": "Profundidad", "y": "Cantidad de Sismos"})
                fig.update_traces(marker=dict(size=10, color=colores[0]), line=dict(color=colores[1]))
            else:
                st.error("Tipo de gr√°fico no soportado.")
                return
            st.plotly_chart(fig)
            cantidad = datos_filtrados.shape[0]
            st.write(f"Cantidad de sismos : {cantidad}")
        else:
            st.error("La profundidad m√≠nima no puede ser mayor que la m√°xima.")

    elif filtro_tipo == "Por valor √∫nico de profundidad":
        profundidad = st.number_input("Ingresa una profundidad (km):", value=float(data["PROFUNDIDAD"].min()), step=0.1)
        datos_filtrados = data[data["PROFUNDIDAD"] == profundidad]
        if datos_filtrados.empty:
            st.write("No se encontraron datos para la profundidad seleccionada.")
        else:
            st.dataframe(datos_filtrados)
            cantidad = datos_filtrados.shape[0]
            st.write(f"Cantidad de sismos : {cantidad}")

# MENU
# Funci√≥n mapa
def mapa():
    # Configuraci√≥n de la p√°gina
    """
    st.set_page_config(page_title="Mapa de Sismos en Per√∫", layout="wide")
    """
    
    # T√≠tulo de la aplicaci√≥n
    st.title("üåé Mapa Interactivo de Sismos en Per√∫")

    # Cargar el archivo GeoJSON con los l√≠mites de los departamentos de Per√∫
    departamentos = gpd.read_file('departamentos_per√∫.geojson')
    if departamentos.crs is None or departamentos.crs != "EPSG:4326":
        departamentos = departamentos.to_crs("EPSG:4326")

    
    # Cargar el dataset de los sismos
    df = pd.read_csv('Dataset_1960_2023_sismo.csv')

    
    # Crear nuevas columnas para A√±o, Mes (como texto) y D√≠a
    #df['FECHA_UTC'] = pd.to_datetime(df['FECHA_UTC'], format='%Y-%m-%d')
    df['FECHA_UTC'] = pd.to_datetime(df['FECHA_UTC'], format='%Y%m%d')
    df['A√ëO'] = df['FECHA_UTC'].dt.year
    # Convert to datetime
    # df['FECHA_UTC'] = pd.to_datetime(df['FECHA_UTC'])
    
    # Define a dictionary for month names in Spanish
    month_names = {
        1: "enero", 2: "febrero", 3: "marzo", 4: "abril",
        5: "mayo", 6: "junio", 7: "julio", 8: "agosto",
        9: "septiembre", 10: "octubre", 11: "noviembre", 12: "diciembre"
    }
    
    # Map the month numbers to their names
    df['MES'] = df['FECHA_UTC'].dt.month.map(month_names)
    # df['MES'] = df['FECHA_UTC'].dt.month_name(locale="es_ES")  # Nombres de meses en espa√±ol
    
    df['DIA'] = df['FECHA_UTC'].dt.day

    # Crear geometr√≠as de puntos a partir de LONGITUD y LATITUD
    geometry = [Point(xy) for xy in zip(df['LONGITUD'], df['LATITUD'])]
    gdf = gpd.GeoDataFrame(df, geometry=geometry, crs="EPSG:4326")

    # Realizar el join espacial para filtrar solo datos dentro de Per√∫
    joined_gdf = gpd.sjoin(gdf, departamentos, how="inner", predicate="intersects")

    # Crear columnas para separar el mapa y los filtros
    col1, col2 = st.columns([3, 1])  # Columna m√°s ancha para el mapa (3), columna m√°s estrecha para los filtros y gr√°ficos (1)

    # Filtros de selecci√≥n en la columna derecha
    with col2:
        st.markdown("### Filtros de Selecci√≥n")
        
        # Filtro por departamento (con opci√≥n de seleccionar m√∫ltiples)
        filtro_departamento = st.multiselect("Selecciona un o m√°s departamentos", options=["Todos"] + departamentos['NOMBDEP'].unique().tolist(), default=["Todos"])
        
        # Filtro por rango de a√±os y a√±o √∫nico
        filtro_a√±o_unico = st.selectbox("Selecciona un a√±o", options=["Todos"] + sorted(df['A√ëO'].unique().tolist()), index=0)
        rango_a√±os = st.slider("Selecciona un rango de a√±os", min_value=int(df['A√ëO'].min()), max_value=int(df['A√ëO'].max()), value=(int(df['A√ëO'].min()), int(df['A√ëO'].max())))
        
        # Filtro por mes
        filtro_mes = st.multiselect("Selecciona el mes", options=df['MES'].unique(), default=[])
        
        # Filtro por rango de magnitudes
        rango_magnitud = st.slider("Selecciona un rango de magnitudes", min_value=float(df['MAGNITUD'].min()), max_value=float(df['MAGNITUD'].max()), value=(float(df['MAGNITUD'].min()), float(df['MAGNITUD'].max())))

        # Filtro por rango de profundidad
        rango_profundidad = st.slider("Selecciona un rango de profundidad (km)", min_value=float(df['PROFUNDIDAD'].min()), max_value=float(df['PROFUNDIDAD'].max()), value=(float(df['PROFUNDIDAD'].min()), float(df['PROFUNDIDAD'].max())))

        # Filtrar los datos seg√∫n los filtros seleccionados
        filtered_gdf = joined_gdf.copy()

        # Filtrar por departamento si no est√° en "Todos"
        if "Todos" not in filtro_departamento:
            filtered_gdf = filtered_gdf[filtered_gdf['NOMBDEP'].isin(filtro_departamento)]
        
        # Filtrar por a√±o √∫nico
        if filtro_a√±o_unico != "Todos":
            filtered_gdf = filtered_gdf[filtered_gdf['A√ëO'] == int(filtro_a√±o_unico)]
        
        # Filtrar por rango de a√±os
        if rango_a√±os:
            filtered_gdf = filtered_gdf[(filtered_gdf['A√ëO'] >= rango_a√±os[0]) & (filtered_gdf['A√ëO'] <= rango_a√±os[1])]
        
        # Filtrar por mes
        if filtro_mes:
            filtered_gdf = filtered_gdf[filtered_gdf['MES'].isin(filtro_mes)]
        
        # Filtrar por magnitud
        if rango_magnitud:
            filtered_gdf = filtered_gdf[(filtered_gdf['MAGNITUD'] >= rango_magnitud[0]) & (filtered_gdf['MAGNITUD'] <= rango_magnitud[1])]
        
        # Filtrar por profundidad
        if rango_profundidad:
            filtered_gdf = filtered_gdf[(filtered_gdf['PROFUNDIDAD'] >= rango_profundidad[0]) & (filtered_gdf['PROFUNDIDAD'] <= rango_profundidad[1])]

        # Mostrar la cantidad de puntos filtrados
        st.write(f"Cantidad de puntos filtrados: {len(filtered_gdf)}")

    # Crear un mapa centrado en Per√∫
    mapa_peru = folium.Map(location=[-9.19, -73.015], zoom_start=6)

    # Agregar los l√≠mites de los departamentos al mapa
    def estilo_departamento(feature):
        if feature['properties']['NOMBDEP'] in filtro_departamento or "Todos" in filtro_departamento:
            return {"fillColor": "#ff7800", "color": "red", "weight": 3, "fillOpacity": 0.5}
        return {"fillColor": "#14c7c1", "color": "black", "fillOpacity": 0.3}

    folium.GeoJson(
        departamentos,
        name="DEPARTAMENTO",
        style_function=estilo_departamento
    ).add_to(mapa_peru)

    # **Agregar esta condici√≥n para verificar si hay filtros seleccionados**
    if len(filtro_departamento) > 0 or len(filtro_mes) > 0 or filtro_a√±o_unico != "Todos" or rango_a√±os != (int(df['A√ëO'].min()), int(df['A√ëO'].max())) or rango_magnitud != (float(df['MAGNITUD'].min()), float(df['MAGNITUD'].max())) or rango_profundidad != (float(df['PROFUNDIDAD'].min()), float(df['PROFUNDIDAD'].max())):
        # Mostrar los puntos solo si hay al menos un filtro seleccionado
        if len(filtered_gdf) > 0:
            for _, row in filtered_gdf.iterrows():
                folium.CircleMarker(
                    location=[row['LATITUD'], row['LONGITUD']],
                    radius=5,
                    color="red",
                    fill=True,
                    fill_color="red",
                    fill_opacity=0.7,
                    popup=f"Departamento: {row['NOMBDEP']}<br>A√±o: {row['A√ëO']}<br>Mes: {row['MES']}<br>D√≠a: {row['DIA']}<br>Magnitud: {row['MAGNITUD']}<br>Profundidad: {row['PROFUNDIDAD']} km",
                ).add_to(mapa_peru)

    # Mostrar el mapa interactivo en la columna izquierda
    with col1:
        st.markdown("### Mapa de sismos en Per√∫")
        st_data = st_folium(mapa_peru, width=800, height=500)

    # Generar gr√°fico apilado por departamento y meses
    st.markdown("### Gr√°fico de Meses y D√≠as por Departamento")
    if not filtered_gdf.empty:
        fig, ax = plt.subplots(figsize=(10, 6))
        pivot_data = filtered_gdf.pivot_table(
            index='NOMBDEP',
            columns='MES',
            values='DIA',
            aggfunc='count',
            fill_value=0
        )
        pivot_data.plot(kind='bar', stacked=True, ax=ax, colormap='viridis')
        ax.set_title('Distribuci√≥n de D√≠as por Departamento y Mes')
        ax.set_xlabel('Departamento')
        ax.set_ylabel('Cantidad de D√≠as')
        plt.xticks(rotation=45)
        st.pyplot(fig)
    else:
        st.write("No hay datos que coincidan con los filtros seleccionados.")

def conclusion():
    st.markdown(""" 
    <h2>An√°lisis de Riesgos S√≠smicos en Per√∫ y el Desarrollo de una Plataforma de Cat√°logo S√≠smico<h2>
    <h3>Conclusi√≥n<h5> """, unsafe_allow_html=True)

    col1, col2 = st.columns(2)
    # Conclusi√≥n  al tema
    with col1:
        st.markdown("""
        <p style='font-size: 1.4rem;'>
        En conclusi√≥n, nuestro proyecto consiste en el desarrollo de un dashboard interactivo para visualizar y analizar datos s√≠smicos de Per√∫ entre 1960 y 2023, utilizando un dataset en formato CSV. Realizamos un procesamiento de datos para asignar los sismos a departamentos espec√≠ficos y ajustamos el formato de fecha y hora para mayor legibilidad. El dashboard, construido con Streamlit, ofrece funcionalidades como filtros de selecci√≥n, gr√°ficos de barras y un mapa interactivo. La interfaz incluye un men√∫ de navegaci√≥n para facilitar la interacci√≥n del usuario, y destacamos la importancia de una gu√≠a de usuario que explique el uso del dashboard con im√°genes ilustrativas.
        Consideramos que el proyecto tiene un alto potencial para la evaluaci√≥n de riesgos s√≠smicos, la investigaci√≥n geol√≥gica y la educaci√≥n p√∫blica. Sin embargo, es fundamental asegurar la implementaci√≥n completa del c√≥digo, tener en cuenta la precisi√≥n de la geolocalizaci√≥n y mantener el dataset actualizado.
        </p>""", unsafe_allow_html=True)

    with col2:
        st.image(
            "img/sismo_conclusion.png",  # Ruta relativa a la imagen
            caption="El movimiento de la tierra nos impulsa a ser m√°s conscientes y a valorar cada instante", use_container_width=True
        )

    st.markdown("""
    ### Recursos adicionales
    - [El sitio web oficial de los registros administrativos del riesgo de desastres](https://sigrid.cenepred.gob.pe/sigridv3/documento/17731)
    - [El Sistema Nacional de Informaci√≥n Ambiental](https://sinia.minam.gob.pe/normas/aprueban-ejecucion-simulacros-simulaciones-directiva-ejecucion)
    """)
    st.info("üôåLa naturaleza puede ser poderosa, pero la valent√≠a y la solidaridad de las personas son indestructibles.ü•∞")

def foto():
    personas = [
        {"nombre": "", "info": "", "imagen": "img/noemi.png"},
        {"nombre": "", "info": "", "imagen": "img/carlos.png"},
        {"nombre": "", "info": "", "imagen": "img/nilda.png"},
        {"nombre": "", "info": "", "imagen": "img/bertil.png"}
    ]

    st.markdown("### üßë‚Äçüíª Equipo del Proyecto")

    # Crear un dise√±o en 2 filas y 2 columnas
    col1, col2 = st.columns(2)

    # Mostrar las primeras dos im√°genes en la primera fila
    with col1:
        st.image(personas[0]["imagen"], width=450, caption=personas[0]["nombre"])
        st.markdown(f"**{personas[0]['nombre']}**")
        st.write(personas[0]["info"])

    with col2:
        st.image(personas[1]["imagen"], width=450, caption=personas[1]["nombre"])
        st.markdown(f"**{personas[1]['nombre']}**")
        st.write(personas[1]["info"])

    # Segunda fila con dos columnas
    col3, col4 = st.columns(2)

    with col3:
        st.image(personas[2]["imagen"], width=450, caption=personas[2]["nombre"])
        st.markdown(f"**{personas[2]['nombre']}**")
        st.write(personas[2]["info"])

    with col4:
        st.image(personas[3]["imagen"], width=450, caption=personas[3]["nombre"])
        st.markdown(f"**{personas[3]['nombre']}**")
        st.write(personas[3]["info"])

# MEN√ö - ENCABEZADO
with st.container():
    col1, col2 = st.columns([1, 5])
    with col1:
        st.image("img/logo_upch.png", width=800)  # Tama√±o ajustado del logo
    with col2:
        # Crear el men√∫ de navegaci√≥n principal
        selected = option_menu(
            menu_title=None,  # Oculta el t√≠tulo del men√∫
            options=["Inicio", "Gr√°ficos", "Mapa","Conclusi√≥n","Sobre nosotros"],  # Cambi√© a "Gr√°ficos" como una opci√≥n principal
            icons=["house", "filter", "geo-alt-fill","body-text", "bi-people-fill"],  # √çconos para cada opci√≥n
            menu_icon="cast",  # √çcono del men√∫
            default_index=0,  # P√°gina predeterminada
            orientation="horizontal",  # Orientaci√≥n horizontal
            styles={
                "container": {"padding": "0!important", "background-color": "#333"},
                "icon": {"color": "orange", "font-size": "25px"}, # tama√±o de icono
                "nav-link": {
                    "font-size": "18px", #tama√±o letras
                    "text-align": "center",
                    "margin": "0px",
                    "padding": "18px 28px",# tama√±o de los botones
                    "white-space": "nowrap",
                    "--hover-color": "#444",
                },
                "nav-link-selected": {"background-color": "#1199EE"},
            },
        )

# L√≥gica para navegar entre las p√°ginas y submen√∫
if selected == "Gr√°ficos":
    selected_graph = option_menu(
        menu_title="Gr√°ficos",  # T√≠tulo del submen√∫
        options=["Por A√±o", "Por Magnitud", "Por Profundidad"],  # Opciones del submen√∫
        icons=["calendar", "bar-chart", "layers"],  # √çconos de submen√∫
        menu_icon="cast",  # √çcono del submen√∫
        default_index=0,  # P√°gina predeterminada dentro del submen√∫
        orientation="vertical",  # Orientaci√≥n vertical
        styles={
            "container": {"padding": "0!important", "background-color": "#444"},
            "icon": {"color": "orange", "font-size": "14px"},
            "nav-link": {
                "font-size": "14px",
                "text-align": "center",
                "margin": "0px",
                "padding": "10px",
                "--hover-color": "#555",
            },
            "nav-link-selected": {"background-color": "#1199EE"},
        },
    )

    # Submen√∫ espec√≠fico para cada tipo de gr√°fico
    tipo_grafico = option_menu(
        menu_title="Tipo de Gr√°fico",
        options=["Barras", "Sector Circular", "L√≠neas"],
        icons=["bar-chart", "pie-chart", "bar-chart-line", "picture", "graph-up"],
        menu_icon="cast",
        default_index=0,
        orientation="horizontal",
        styles={
            "container": {"padding": "0!important", "background-color": "#333"},
            "icon": {"color": "orange", "font-size": "14px"},
            "nav-link": {
                "font-size": "14px",
                "text-align": "center",
                "margin": "0px",
                "padding": "10px",
                "--hover-color": "#444",
            },
            "nav-link-selected": {"background-color": "#1199EE"},
        },
    )

    # Renderizar gr√°ficos seg√∫n las selecciones
    if selected_graph == "Por A√±o":
        if tipo_grafico == "Barras":
            visualizacion_anos(tipo="barras")
        elif tipo_grafico == "Sector Circular":
            visualizacion_anos(tipo="sector")
        elif tipo_grafico == "L√≠neas":
            visualizacion_anos(tipo="lineas")
    elif selected_graph == "Por Magnitud":
        if tipo_grafico == "Barras":
            visualizacion_magnitud(tipo="barras")
        elif tipo_grafico == "Sector Circular":
            visualizacion_magnitud(tipo="sector")
        elif tipo_grafico == "L√≠neas":
            visualizacion_magnitud(tipo="lineas")
    elif selected_graph == "Por Profundidad":
        if tipo_grafico == "Barras":
            visualizacion_profundidad(tipo="barras")
        elif tipo_grafico == "Sector Circular":
            visualizacion_profundidad(tipo="sector")
        elif tipo_grafico == "L√≠neas":
            visualizacion_profundidad(tipo="lineas")

elif selected == "Inicio":
    home_page()
elif selected == "Mapa":
    mapa()  
elif selected == "Conclusi√≥n":
    conclusion()
elif selected == "Sobre nosotros":
    foto()
